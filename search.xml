<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>这只是一个自制系算计系统的项目</title>
    <url>/2020/%E8%BF%99%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E8%87%AA%E5%88%B6%E7%B3%BB%E7%AE%97%E8%AE%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>该项目是一个自制<strong>计算机系统</strong>的项目，其目标包括cpu设计、外围的控制器如内存、cache、IO、中断等设计、外设如打印机、存储器等的设计，编译器和操作系统的移植。项目本身并不追求极限性能，和完美的安全性，只是在力所能及的条件下做一些优化。功能完善、易于测试和扩展是本项目的首要目标。</p>
<h3 id="硬件设计目标"><a href="#硬件设计目标" class="headerlink" title="硬件设计目标"></a>硬件设计目标</h3><p>本项目所使用的CPU为类MIPS架构，硬线逻辑仅支持整数指令，没有硬件乘法器、除法器。在FPGA中综合，不使用任何基于厂商的IP。采用5级流水线，精确中断，集成SDRAM双端口控制器，包含一级指令和数据cache。</p>
<p>CPU的整体结构与李亚民所著的《计算机原理与设计》中的相似，但调整了一些指令的实现，并期望引入微代码来增加CPU的可扩展性，降低编译器移植和系统编程的难度。</p>
<h3 id="编译器移植目标"><a href="#编译器移植目标" class="headerlink" title="编译器移植目标"></a>编译器移植目标</h3><p>本项目计划移植lcc编译器到该平台，以实现工具链软件。由于本项目所使用的CPU与MIPS结构相似，所以移植基于lcc编译器的MIPS后端md文件进行。由于本项目所使用的CPU与MIPS结构不完全相同，修改lcc的后端的工作可能包括：</p>
<ul>
<li>熟悉lcc的整体结构,包括其前端和中间代码生成</li>
<li>基于MIPS后端针对该平台进行移植</li>
<li>进行一些力所能及的优化和测试工作</li>
</ul>
<p>编译器是一个十分复杂的程序，编译器移植工作可能是整个项目中难度最大的部分。</p>
<h3 id="其他工具链软件的设计"><a href="#其他工具链软件的设计" class="headerlink" title="其他工具链软件的设计"></a>其他工具链软件的设计</h3><ul>
<li>对于连接器，本项目认为其在项目初期是可选的</li>
<li>对于汇编器，本项目拟选择一个维护良好的开源汇编器为基础，进行修改</li>
<li>对于预处理器，本项目拟直接使用gcc工具链的C语言预处理器</li>
</ul>
<h3 id="操作系统的移植目标"><a href="#操作系统的移植目标" class="headerlink" title="操作系统的移植目标"></a>操作系统的移植目标</h3><p>鉴于MINIX操作系统有详细的资料，并且代码量很少只有几万行，本项目打算在工具链软件调试适当时，进行操作系统的移植工作，目标是将MINIX操作系统移植到该自制平台。这些工作可能包含：</p>
<ul>
<li>Minix 源码的阅读</li>
<li>X86 保护模式的考察</li>
<li>对于该自制平台的保护模式的设计取舍的思考</li>
<li>在不影响兼容性的情况下加入虚拟内存（段式或页式）</li>
<li>Minix 的移植工作</li>
</ul>
<p>从目前来看，minix中平台相关的代码，大量是处理保护模式、中断向量等内容，在硬件相关的设计上可以进行取舍，以简化移植工作。</p>
<p>对于该自制平台的保护模式的设计目标，主要是为了保护操作系统内核的安全，保障操作系统的稳定运行。并不追求完美的进程间的数据隔离。因为Intel的处理器，花费了巨大的精力，实现了其精妙的保护模式，仍然逃不过幽灵、熔毁等旁路攻击。所以在一个科研性质的自制平台上追求完美的数据隔离是不自量力的行为。</p>
<p>Minix3 并不支持分页，使用的是段式存储，这需要对cpu的内存控制进行一些修改。</p>
<p>希望向CPU中加入微代码，也有方便系统编程的目的。可将常用的系统编程指令序列设计成若干由微指令解释的指令，如内存块的复制，中断、异常发生时现场的保存、从中断、异常返回时的现场恢复等。</p>
<p>因为系统编程这一部分，大部分是用汇编语言直接编写，所以编译器并不能帮上忙，若直接定义新指令，可以简化这部分编程的难度，也利于调试。而且这些系统编程指令，往往不是用户程序所使用的，因此编译器可能永远都不知道这些指令的存在，所以引入这些指令可能不需要对编译器的修改。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>该项目是一个长期项目，笔者已经为实施该项目所需要的知识储备准备了多年，并搜集了一些参考资料。</p>
<h4 id="硬件系统的设计"><a href="#硬件系统的设计" class="headerlink" title="硬件系统的设计"></a>硬件系统的设计</h4><ol>
<li>Verilog HDL 数字设计与综合， Samir Lalnitkar, 夏文宇等译。</li>
<li>See MIPS Run, Dominic Sweetman. 这本书很好看，解释了许多重要的概念，例如MIPS中的指令延时槽，内存的保护等。关于这本书还有一些小故事，之前我一直在读这本书，直到最近我才发现这本书有一本中文译本，而且翻译质量非常好，打开一看竟然是我自己的老师<strong>屈建勤</strong>翻译的，相见恨晚呀！<strong>感谢屈老师能为大家提供这么好的学习资料的翻译</strong>。</li>
<li>Computer System Architecture, M.Morris Mano. 这本书是很老的书，但是笔者是从这本书里入门的。这本书是笔者刚开始学习计算机系统设计时，经过了很多次试错，最终选定的一本书，写的非常详细。书中从最基本的数字逻辑开始，一直讲到外围电路的设计，没有使用任何基于商业软件的IP，而且最终书里实现了一个很简单的CPU。</li>
<li>计算机原理与设计,李亚民。本项目设计的CPU基于这本书所记载的类MIPS CPU进行修改。笔者非常感谢这本书的作者，这是一本伟大的著作。这本书是我看到过的对处理器设计描述最详尽的著作。在工程上，理论和实践的差距之巨大，无法用语言描述。阅读这本书，从作者精妙的代码中，就可以填补理论和实践之间巨大的鸿沟，这对一个工程师来说会产生一种巨大的满足感。</li>
<li>Fpga4Fun: <a href="https://www.fpga4fun.com/" target="_blank" rel="noopener">https://www.fpga4fun.com/</a>. 笔者通过这个网站入门FPGA。</li>
<li>Computer Organization And Design  The Hardware/Software Interface. 这是一本经典教材。</li>
</ol>
<h4 id="软件系统的设计"><a href="#软件系统的设计" class="headerlink" title="软件系统的设计"></a>软件系统的设计</h4><ol>
<li>Operating System Design and Implementation (the Minix Book), Andrew S. Tanenbaum. 这本书简直是学习操作系统的圣经，就是如果认真读代码的话，需要大量的精力。</li>
<li>Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3A: System Programming Guide, Part 1. Minix书中的代码是基于X86的，要想读明白其平台相关的部分，X86的系统编程手册是不可缺少的材料。关于X86的保护模式，手册里有介绍，但是他的介绍非常繁琐，笔者也是花了很长时间才弄明白，有机会笔者会写一篇博文，详细介绍minix如何使用X86的保护模式。</li>
<li>MOP: Minix Overdocumentation Project,<a href="http://www.os-forum.com/minix/boot/index.php" target="_blank" rel="noopener">http://www.os-forum.com/minix/boot/index.php</a>. 这个网站的作者，花费了大量的时间，对minix的启动代码进行了逐行分析。只要完整的阅读完这个网站，你就可以知道一台X86 PC在按下电源按钮后，BIOS运行结束后到操作系统加载之间的所有运行情况。但是要做好心理准备，这个过程很复杂，并且理解他需要了解X86的保护模式。Minix书中并没有对其boot monitor的代码进行注释，只是在书中提了一句，说boot monitor十分复杂，不亚于一个小型的操作系统。事实上也确实如此，笔者不才，完整阅读这个网站花费了两个多月的时间。笔者发现这个网站，是在读minix书的过程中，由于书中对其启动器描述的缺乏，使得我对操作系统初始的运行环境有疑惑，进而找到了这个网站，完美地解答了疑惑。这个网站的作者，对笔者也有很深的影响，有时候做一件事不需要考虑太多结果。学习本身就是一件有意义的事情，对于个人如此，对于社会更是如此。这个网站也是我准备这个博客的原因之一，要把自己的学习过程社会化，只要能有一个人从我的经历中得到帮助，本身就是一件很有意义的事情。</li>
<li>Lcc-A Retargetable C Compiler: Design and Implementation. lcc是一个很有名的编译器，它本身是一个文本程序，这本书详细的介绍了其实现的每一个细节。只是笔者水平有限，读起来十分吃力，花了将近四个月时间才读完，掌握了对其修改的能力，也深入了解了ANSI C标准的实现。值得一提的是，这本书有一中文译本，但是很遗憾，不同章节翻译的质量有很大的波动，而且也有一些翻译上的错误，在这里笔者就不推荐了。</li>
</ol>
]]></content>
      <categories>
        <category>home brew computer system</category>
      </categories>
      <tags>
        <tag>home brew computer system</tag>
        <tag>summarize</tag>
        <tag>development log</tag>
      </tags>
  </entry>
  <entry>
    <title>在MIPS CPU中引入微代码</title>
    <url>/2020/%E5%9C%A8MIPS-CPU%E4%B8%AD%E5%BC%95%E5%85%A5%E5%BE%AE%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>本项目所设计的CPU，与李亚民书中所描述的CPU主要区别是在MIPS CPU中引入了微代码，方便指令集的扩展、编译器的移植和系统编程。</p>
<h2 id="带有微指令的IF级"><a href="#带有微指令的IF级" class="headerlink" title="带有微指令的IF级"></a>带有微指令的IF级</h2><p><img src="/2020/%E5%9C%A8MIPS-CPU%E4%B8%AD%E5%BC%95%E5%85%A5%E5%BE%AE%E4%BB%A3%E7%A0%81/IF_with_micro_code.png" alt="原理图"></p>
<p>由原理图可知，主要的修改是加入了：</p>
<ul>
<li>微指令存储器 uprog</li>
<li>微指令寄存器 uPC</li>
<li>下一个微指令选择器</li>
<li>IF控制器 IF Control</li>
<li>状态寄存器 State</li>
</ul>
<h2 id="微指令存储器的结构"><a href="#微指令存储器的结构" class="headerlink" title="微指令存储器的结构"></a>微指令存储器的结构</h2><p>本平台使用的微指令有如下结构：</p>
<pre class="mermaid">classDiagram
class MicroCode{
    head 1
    head 2
    ......
    head n
    code1 ()
    code2 ()
    coden ()
}

class Head{
    a JUMP instruction
    first op in the code section-delay slot
}</pre>


<p>微指令存储器包括两个部分,头部按照指令号寻址，按顺序存放在存储器中。每个头部域有两行，第一行是一个跳转指令，跳转到对应的代码域，第二行是为了满足延时槽的特点，将代码域的第一行代码放置在延时槽中。</p>
<p>由于微指令的头部有两行，所以在使用指令中的指令号作为地址对微代码存储器寻址时，要先向左位移一位。</p>
<p>如此设计微指令存储器，可以方便寻址，并且最大限度地利用微指令存储器的空间，头部和代码之间没有分割。</p>
<p>微指令存储器的代码域由一个终结指令分割。这个终结指令供IF控制器判断一个微指令是否结束。代码域中可以使用任何一条用硬线逻辑实现的指令，一旦进入微指令状态，微指令中的跳转指令将只修改微指令计数器uPC。每个微指令代码域的最后一条指令（终止符前）不能是跳转指令。</p>
<h2 id="微指令工作过程"><a href="#微指令工作过程" class="headerlink" title="微指令工作过程"></a>微指令工作过程</h2><p>在不考虑中断或异常的情况下，整个IF阶段实际上分为两个个状态：</p>
<ol>
<li>正常状态<ul>
<li>该状态是指现在没有微指令在执行</li>
</ul>
</li>
<li>伪指令状态<ul>
<li>该状态指现在正在执行微指令</li>
</ul>
</li>
</ol>
<p>与此同时，还要判断两个动作：</p>
<ol>
<li>正常状态–&gt;微指令状态（enter）</li>
<li>微指令状态–&gt;正常状态（exit）</li>
</ol>
<p>IF的状态由State Register记录，动作由state和正在输入的指令（INS_in, uINS_in）判断。</p>
<table>
<thead>
<tr>
<th>状态转换</th>
<th>State</th>
<th>nState</th>
<th>INS_in</th>
<th>uINS_in</th>
<th>wpc</th>
<th>wupc</th>
<th>enter</th>
<th>out_sl</th>
</tr>
</thead>
<tbody><tr>
<td>n-&gt;n</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>n-&gt;u</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>x</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>u-&gt;u</td>
<td>1</td>
<td>1</td>
<td>x</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>u-&gt;n</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>u-&gt;n</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>上表中，表头对应原理图中的信号。state=0表示正常状态，state=1表示进入微指令状态。nState表示下一个状态。INS_in=0 表示当前指令以硬件方法实现，INS_in=1 表示当前指令是以微指令方式实现。uINS_in=0表示当前微指令不是结束符，uINS_in=1表示当前微指令是结束符。wpc和wupc分别控制pc和upc的写入使能。</p>
<p>enter为进入微指令状态时的指示信号，为了提高ipc，一旦发现一条指令时使用微指令实现的，就应当直接输出对应的微指令，所以进入微指令状态需要额外处理：微指令存储器的地址直接由enter信号选择为指令中的地址位，微指令存储器输出head中对应的跳转指令，下个时钟周期到来时，该地址+4放入upc，微指令状态延时槽仍然保留。之后的upc由ID阶段的upcSource更新。</p>
<p>out_sl标志输出是微指令存储器内的内容还是指令cache中的内容。当状态发生转换时，n-&gt;u时，若将指令cache中的指令直接传入ID，ID是无法识别的，这个时候因为enter信号的作用，使得该指令对应的微指令已准备好，所以out_sl为1，即当微指令实现的指令出现时，直接传入其对应的微指令。同理，当u-&gt;n时，若将微指令结束符传入ID，ID也是无法识别的，这个时候急需要使out_sl=0选择输出下一条指令。这里还有一个特殊情况，就是当下一个输入的指令也是由微指令实现的，那么实际上IF阶段再一次进入了微指令状态（reenter），这时enter信号选择了新的微指令地址，向ID级输入正确的指令。</p>
<p>关于pc和upc的控制有些复杂，简单来说，就是消耗一条指令，就要写一次pc，消耗一条微指令就要写一次upc。所以可以看到当enter和reenter的情况发生时，等于说既消耗了一条指令，又消耗了一条微指令，所以在这种情况下pc和upc均被写入。</p>
<p>由于延时槽和流水线的存在，使得下一个pc和upc的值的判断变得复杂。而我的设计又希望尽可能地将修改停留在IF级，所以才把pc和upc地写入限制加在了IF级。由于ID级要计算跳转指令的目标地址，所以当前PC或者uPC要传入ID级。改进的IF级中，nPC和nuPC的两个多路复用器，除了+4这一项输入分别对应pc和upc自身外，其余三个输入是相同的，均由ID级直接给出，选择信号也是相同的，也由ID级直接给出。这样做的好处是对于ID级不需要做任何修改，就能实现在微指令状态中的跳转修改upc，而在正常状态下的跳转指令修改pc。考虑下面几种情况中pc和upc的变化。</p>
<table>
<thead>
<tr>
<th>存储器位置</th>
<th>情况一</th>
<th>情况二</th>
<th>情况三</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>硬件实现指令（非跳转）</td>
<td>跳转指令</td>
<td>硬件实现指令（非跳转）</td>
</tr>
<tr>
<td>02</td>
<td>微指令实现指令</td>
<td>微指令实现指令</td>
<td>微指令实现指令</td>
</tr>
<tr>
<td>03</td>
<td>硬件实现治指令</td>
<td>跳转指令的目标</td>
<td>微指令实现指令</td>
</tr>
</tbody></table>
<p>情况一是比较正常的情况，pc=01，该指令是一个硬件实现指令，所以直接输出，这时候向下一级输出PC。下一个时钟到来，若当前指令是延时槽中的指令，pc等于其目标；若当前指令不处于延时槽中，则pc=pc+4。若跳转的目标是一条普通指令，这种情况比较正常，不涉及到状态切换，在这里不考虑。</p>
<p>当pc=pc+4 或者当前指令是延时槽中的指令，并且跳转的目标刚好是02，这时候要发生状态切换。此时01指令已在ID级，它不是跳转指令，所以pc_source被ID级设置成pc+4。而此时是enter的情况，所以upc被设置成指令中所知的位置，而upc_source和pc_source公用一个信号，所以upc_source也被设置成upc+4.当 下一个时钟周期到来时，由微指令存储器指出的微指令被送入ID，而pc和upc分别被写入为03和微指令头部延时槽的地址。并且IF级向ID级送入upc，供微指令中的跳转指令参考。</p>
<p>当微指令执行结束，也就是upc指向了一个终止符。这时上一条指令（ID级中的指令），由于一定不是跳转指令，所以会把pc_source设置成pc+4，准备向ID级输出pc所指的指令03。下一个时钟到来，upc+4，pc+4=04，而upc指向结束符的下一个指令，脱离结束符的状态。</p>
<p>情况二比较特殊，02位置的指令是一个延时槽。我们考虑这种情况下upc和pc如何变化。pc=01，该指令是一个硬件指令，所以直接输出，这时候向下一级输出pc，此时时钟到来，pc+4=02指向微指令实现的指令。由于ID级是跳转指令，所以ID级将pc_source设置成响应的跳转目标，这里是03。所以时钟到来后，pc=03，upc为指令中所指示的地址+4。可以看出，这种情况实际上和上一种情况是等价的，只是看起来比较特殊。在微指令执行结束后，exit情况也同上一种情况等价。</p>
<p>情况三考虑重进入这种情况。pc=01该指令是一个正常的指令，与情况一相同，在这就不详细分析了。考虑重进入的时刻，将02所代表的微指令送入ID时，pc已被设置为03，此时02中的微指令执行完毕，upc指向终止符，由于此时ID级一定不是跳转指令，因此pc_source被设置成pc+4，由于是重进入，当时钟到来时，IF会选出03所指的微指令中的跳转指令，并将upc设置为03中指令所指的位置+4（微指令头部的延时槽），同时会将pc设置为04.</p>
<p>由对上述三种情况的分析可以知道，我所设计的微指令系统时可以正常工作的。对这些情况的分析是多余的，是因为npc和nupc的值是由ID级的指令决定的。ID级是硬件指令，IF正在处理微指令，这种情况（enter）upc是特殊处理的，并不会影响pc的更新。同理ID级时微指令，IF级正在处理硬件指令，这种情况下upc和pc都直接加4，upc+4后跨越了终结符，其值在下一次进入时在被更新。其余的情况ID级时硬件指令，IF级也是硬件指令或者ID级是微指令，IF级也是微指令，这两种情况与未加入微指令系统的情况相同，只是选择性的对pc和upc的写入进行使能控制。</p>
<h2 id="微指令系统对精确中断的影响"><a href="#微指令系统对精确中断的影响" class="headerlink" title="微指令系统对精确中断的影响"></a>微指令系统对精确中断的影响</h2><p>在流水线中实现精确中断并不是一件容易的事，尤其是在有分支、有延时槽的情况下。所以笔者不打算采用列举各种情况来分析引入微指令对精确中断的影响，而是试图从更高的层面去思考这个问题，以对终端系统进行针对性的修改。</p>
<p>中断和异常会在ID级或者EXE级到来。ID级的异常，可以是硬件中断，未实现的指令或者是系统调用systemcall。EXE级的异常可以是算术指令的溢出。</p>
<p>分析引入微指令对精确中断的影响，要分析IF阶段的取指结果，和那些因素有关。</p>
]]></content>
      <categories>
        <category>home brew computer system</category>
      </categories>
      <tags>
        <tag>home brew computer system</tag>
        <tag>cpu design</tag>
        <tag>micro program</tag>
      </tags>
  </entry>
</search>
