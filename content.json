{"pages":[{"title":"404 NOT FOUND","text":"","link":"/404.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"},{"title":"404 NOT FOUND","text":"","link":"/404.html"},{"title":"about","text":"","link":"/zh-CN/about/index.html"},{"title":"Categories","text":"","link":"/zh-CN/categories/index.html"},{"title":"Tags","text":"","link":"/zh-CN/tags/index.html"}],"posts":[{"title":"cpu内部只采用一个时钟，对于不同速度的组件将采用clock enabler","text":"几乎所有人都不建议，在FPGA中使用多于一个时钟。在FPGA中使用不同的时钟，涉及到在不同的时钟域（clock domain）进行同步，数据的同步通常使用两个串联的触发器，flag（一个周期的信号）通常转换成电平转换，然后再到另一个域进行同步，详细的设计可以看这里。 因此，我也决定在我的设计中撤销异步的清零、下边沿的清零。在需要使用不同速度的组件，如设计目标中的可以暂停的，可以调速的cpu，采用计数器激活的clock enabler，详细设计可以看这里。这样对我现有的设计的修改产生了一定的工作量。","link":"/cpu%E5%86%85%E9%83%A8%E5%8F%AA%E9%87%87%E7%94%A8%E4%B8%80%E4%B8%AA%E6%97%B6%E9%92%9F%EF%BC%8C%E5%AF%B9%E4%BA%8E%E4%B8%8D%E5%90%8C%E9%80%9F%E5%BA%A6%E7%9A%84%E7%BB%84%E4%BB%B6%E5%B0%86%E9%87%87%E7%94%A8clock-enabler/"},{"title":"下一步的计划","text":"现在lcc的代码已读完，下一步要做的是soc的设计和验证，以及lcc的移植、汇编器的移植。对于汇编器，我准备使用customasm.如果使用这个汇编器，可能在移植lcc时需要修改lcc模板中的一些伪指令如ld,lcomm等。 对于soc的设计，这些天一直在思考的问题是异步通讯的问题。我所希望的系统，cpu运行的速度应该是可变的，甚至可以是单步的。而我又希望能使用de0 nao板载的SDRAM，因此内存控制系统与cpu的通讯一定是异步的。异步通讯要有ready信号，由于我希望cpu运行的速度可变，因此我需要在cache控制器中设置一个双触发的触发器，在ready信号变化时记录并保持ready信号，直至cpu的下一个周期到来，用这个信号控制cpu中cache控制器和ram控制器的异步通讯。 系统地址空间的划分，也是一个需要确定的设计。目前我计划将地址空间按照| ROM | IO | RAM |划分，具体各区域尺寸尚未确定。系统cache只对RAM区域有效。目前我的想法是，根据指令和数据需求的不同，在cache控制器上增加片选、控制信号mux，以实现不同区域对cache的不同操作。对于指令，只需要读取ROM和RAM，所以I cache只需要在原有I cache上增加对ROM的多路复用（直通），由于这个ROM是用作bootloader的，因此不需要很大体积，可以使用同步的方式与I cache链接，因此I cache的改动很小。对于数据，则三个区域都需要读取。显然，io与cpu之间的通讯也是异步的，但我尚未构思完毕整个io控制器的结构，因此io控制器的设计应该是接下来的工作之一。 IO控制器应该包括一些总线（I2C，SPI，etc），一些通讯端口（GPIO，Uart，etc），以及向量中断和异步通讯的支持。需要仔细考虑。 我目前已有cpu部分的Verilog代码，但是这部分代码缺乏测试，没有精确中断支持，没有与cache集成，而且一些指令还需要修改，例如：我打算删除乘法和除法的硬件支持，原因是原有的代码中对乘法和除法的硬件支持来自Altera的IP，这与本项目的设计目标冲突，而且在sparc平台的lcc后端中，有使用软件支持乘法除法的参考样例；我还需要考虑是否增加不同长度的取数操作，考虑如果在lcc移植过程中将所有整数类型的尺寸或者对齐都设置为4字节会怎样。 但是这些工作的顺序很难确定，这是我首先要考虑的问题。 目前我想到的合理的顺序是： 考虑是否增加不同长度的取数操作 回顾已有的cpu代码，分析那些代码可以与cache、IO、中断等独立，并对这些代码进行测试。 定义存储控制和io控制的接口，与cpu对接，测试cpu的中断 设计存储控制 设计io控制 工具链的移植","link":"/%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%9A%84%E8%AE%A1%E5%88%92/"},{"title":"关于中断和io控制器","text":"io和中断的设计定型，成了目前我的cpu设计过程中最亟待解决的问题。若不定型，可能影响接下来其他组件的设计和测试工作。 中断控制基本没啥可修改的，cpu端只有一个中断脚，cp0（协处理器0，即cu）中有四个寄存器，cause用于记录外部中断、内部中断和异常的种类；status中控制这一个中断的开关；base记录中断处理程序的地址，在中断处理程序中使用mfc0指令查询cause寄存器跳转到相应中断的处理程序地址；EPC用来保存中断前的指令地址。这一部分，我只需要额外实现三条指令mfc0，mtc0和eret。 io模块的输入输出部分应该是一个寄存器组，包括状态寄存器、指令寄存器、数据寄存器。状态寄存器标志忙闲，指令寄存器为从cpu获取指令，数据寄存器作为io控制器输入输出的通道。此外，io模块还要与cause寄存器相连，辅助一套中断屏蔽与优先级逻辑，完成中断向量。IO模块中的中断控制可以级联。","link":"/%E5%85%B3%E4%BA%8E%E4%B8%AD%E6%96%AD%E5%92%8Cio%E6%8E%A7%E5%88%B6%E5%99%A8/"},{"title":"在MIPS CPU中引入微代码","text":"本项目所设计的CPU，与李亚民书中所描述的CPU主要区别是在MIPS CPU中引入了微代码，方便指令集的扩展、编译器的移植和系统编程。 带有微指令的IF级 由原理图可知，主要的修改是加入了： 微指令存储器 uprog 微指令寄存器 uPC 下一个微指令选择器 IF控制器 IF Control 状态寄存器 State 微指令存储器的结构本平台使用的微指令有如下结构： classDiagram class MicroCode{ head 1 head 2 ...... head n code1 () code2 () coden () } class Head{ a JUMP instruction first op in the code section-delay slot } 微指令存储器包括两个部分,头部按照指令号寻址，按顺序存放在存储器中。每个头部域有两行，第一行是一个跳转指令，跳转到对应的代码域，第二行是为了满足延时槽的特点，将代码域的第一行代码放置在延时槽中。 由于微指令的头部有两行，所以在使用指令中的指令号作为地址对微代码存储器寻址时，要先向左位移一位。 如此设计微指令存储器，可以方便寻址，并且最大限度地利用微指令存储器的空间，头部和代码之间没有分割。 微指令存储器的代码域由一个终结指令分割。这个终结指令供IF控制器判断一个微指令是否结束。代码域中可以使用任何一条用硬线逻辑实现的指令，一旦进入微指令状态，微指令中的跳转指令将只修改微指令计数器uPC。每个微指令代码域的最后一条指令（终止符前）不能是跳转指令。 微指令工作过程在不考虑中断或异常的情况下，整个IF阶段实际上分为两个个状态： 正常状态 该状态是指现在没有微指令在执行 伪指令状态 该状态指现在正在执行微指令 与此同时，还要判断两个动作： 正常状态–&gt;微指令状态（enter） 微指令状态–&gt;正常状态（exit） IF的状态由State Register记录，动作由state和正在输入的指令（INS_in, uINS_in）判断。 状态转换 State nState INS_in uINS_in wpc wupc enter out_sl n-&gt;n 0 0 0 x 1 0 0 0 n-&gt;u 0 1 1 x 1 1 1 1 u-&gt;u 1 1 x 0 0 1 0 1 u-&gt;n 1 0 0 1 1 1 0 0 u-&gt;u 1 1 1 1 1 1 1 1 上表中，表头对应原理图中的信号。state=0表示正常状态，state=1表示进入微指令状态。nState表示下一个状态。INS_in=0 表示当前指令以硬件方法实现，INS_in=1 表示当前指令是以微指令方式实现。uINS_in=0表示当前微指令不是结束符，uINS_in=1表示当前微指令是结束符。wpc和wupc分别控制pc和upc的写入使能。 enter为进入微指令状态时的指示信号，为了提高ipc，一旦发现一条指令时使用微指令实现的，就应当直接输出对应的微指令，所以进入微指令状态需要额外处理：微指令存储器的地址直接由enter信号选择为指令中的地址位，微指令存储器输出head中对应的跳转指令，下个时钟周期到来时，该地址+4放入upc，微指令状态延时槽仍然保留。之后的upc由ID阶段的upcSource更新。 out_sl标志输出是微指令存储器内的内容还是指令cache中的内容。当状态发生转换时，n-&gt;u时，若将指令cache中的指令直接传入ID，ID是无法识别的，这个时候因为enter信号的作用，使得该指令对应的微指令已准备好，所以out_sl为1，即当微指令实现的指令出现时，直接传入其对应的微指令。同理，当u-&gt;n时，若将微指令结束符传入ID，ID也是无法识别的，这个时候急需要使out_sl=0选择输出下一条指令。这里还有一个特殊情况，就是当下一个输入的指令也是由微指令实现的，那么实际上IF阶段再一次进入了微指令状态（reenter），这时enter信号选择了新的微指令地址，向ID级输入正确的指令。 关于pc和upc的控制有些复杂，简单来说，就是消耗一条指令，就要写一次pc，消耗一条微指令就要写一次upc。所以可以看到当enter和reenter的情况发生时，等于说既消耗了一条指令，又消耗了一条微指令，所以在这种情况下pc和upc均被写入。 由于延时槽和流水线的存在，使得下一个pc和upc的值的判断变得复杂。而我的设计又希望尽可能地将修改停留在IF级，所以才把pc和upc地写入限制加在了IF级。由于ID级要计算跳转指令的目标地址，所以当前PC或者uPC要传入ID级。改进的IF级中，nPC和nuPC的两个多路复用器，除了+4这一项输入分别对应pc和upc自身外，其余三个输入是相同的，均由ID级直接给出，选择信号也是相同的，也由ID级直接给出。这样做的好处是对于ID级不需要做任何修改，就能实现在微指令状态中的跳转修改upc，而在正常状态下的跳转指令修改pc。考虑下面几种情况中pc和upc的变化。 存储器位置 情况一 情况二 情况三 01 硬件实现指令（非跳转） 跳转指令 硬件实现指令（非跳转） 02 微指令实现指令 微指令实现指令 微指令实现指令 03 硬件实现治指令 跳转指令的目标 微指令实现指令 情况一是比较正常的情况，pc=01，该指令是一个硬件实现指令，所以直接输出，这时候向下一级输出PC。下一个时钟到来，若当前指令是延时槽中的指令，pc等于其目标；若当前指令不处于延时槽中，则pc=pc+4。若跳转的目标是一条普通指令，这种情况比较正常，不涉及到状态切换，在这里不考虑。 当pc=pc+4 或者当前指令是延时槽中的指令，并且跳转的目标刚好是02，这时候要发生状态切换。此时01指令已在ID级，它不是跳转指令，所以pc_source被ID级设置成pc+4。而此时是enter的情况，所以upc被设置成指令中所知的位置，而upc_source和pc_source公用一个信号，所以upc_source也被设置成upc+4.当 下一个时钟周期到来时，由微指令存储器指出的微指令被送入ID，而pc和upc分别被写入为03和微指令头部延时槽的地址。并且IF级向ID级送入upc，供微指令中的跳转指令参考。 当微指令执行结束，也就是upc指向了一个终止符。这时上一条指令（ID级中的指令），由于一定不是跳转指令，所以会把pc_source设置成pc+4，准备向ID级输出pc所指的指令03。下一个时钟到来，upc+4，pc+4=04，而upc指向结束符的下一个指令，脱离结束符的状态。 情况二比较特殊，02位置的指令是一个延时槽。我们考虑这种情况下upc和pc如何变化。pc=01，该指令是一个硬件指令，所以直接输出，这时候向下一级输出pc，此时时钟到来，pc+4=02指向微指令实现的指令。由于ID级是跳转指令，所以ID级将pc_source设置成响应的跳转目标，这里是03。所以时钟到来后，pc=03，upc为指令中所指示的地址+4。可以看出，这种情况实际上和上一种情况是等价的，只是看起来比较特殊。在微指令执行结束后，exit情况也同上一种情况等价。 情况三考虑重进入这种情况。pc=01该指令是一个正常的指令，与情况一相同，在这就不详细分析了。考虑重进入的时刻，将02所代表的微指令送入ID时，pc已被设置为03，此时02中的微指令执行完毕，upc指向终止符，由于此时ID级一定不是跳转指令，因此pc_source被设置成pc+4，由于是重进入，当时钟到来时，IF会选出03所指的微指令中的跳转指令，并将upc设置为03中指令所指的位置+4（微指令头部的延时槽），同时会将pc设置为04. 由对上述三种情况的分析可以知道，我所设计的微指令系统时可以正常工作的。对这些情况的分析是多余的，是因为npc和nupc的值是由ID级的指令决定的。ID级是硬件指令，IF正在处理微指令，这种情况（enter）upc是特殊处理的，并不会影响pc的更新。同理ID级时微指令，IF级正在处理硬件指令，这种情况下upc和pc都直接加4，upc+4后跨越了终结符，其值在下一次进入时在被更新。其余的情况ID级时硬件指令，IF级也是硬件指令或者ID级是微指令，IF级也是微指令，这两种情况与未加入微指令系统的情况相同，只是选择性的对pc和upc的写入进行使能控制。 微指令系统对精确中断的影响在流水线中实现精确中断并不是一件容易的事，尤其是在有分支、有延时槽的情况下。所以笔者不打算采用列举各种情况来分析引入微指令对精确中断的影响，而是试图从更高的层面去思考这个问题，以对终端系统进行针对性的修改。 中断和异常会在ID级或者EXE级到来。ID级的异常，可以是硬件中断，未实现的指令或者是系统调用systemcall。EXE级的异常可以是算术指令的溢出。 该微指令系统对原有精确中断的兼容性分析分析引入微指令对精确中断的影响，要分析IF阶段的取指结果，和那些因素有关。如果中断到来，所保存的现场能够在恢复时确保取出的指令是正确的，那么引入微指令对中断就是兼容的。 时钟到来时，存入IR的指令与下面因素有关： pc的值 upc的值 IF的状态state 初看上一张的真值表，可以发现存入IR的指令还和当前指令是否是硬件实现的，和当前微指令是否是结束符有关。但如果考虑存储器中的内容在是固定的（对于指令和微指令而言，存储器的内容都是固定的），那么当前指令和当前微指令均是由pc和upc决定的。 也就是说，只要保存pc、upc和state，在恢复时就可以恢复这一个时钟到来时所取的指令。 而精确中断的机制，就是根据发生异常的位置，保存中断返回地址取指时的IF状态，因此，对原有终端系统的修改，只需要将过去只保存PC，改为同时保存PC、uPC和state即可。 中断到来对取指的影响如果没有中断机制，IF级的状态转移如上一节的表格所示。但是中断机制的引入使IF级变得更加复杂。 中断相当于强制跳转并保存现场，也就是说中断到来时应当强制更新pc的值。但是IF级所取的下一条指令是由上文所说的pc,upc以及state决定的，而ID给出的中断信号，只能改变PC_INT多路器的选择信号。由此可知，上文中的状态转移过程，若wpc是1，则中断来临时，pc会在时钟到来时更新到中断向量所指的位置。 但有一种特殊情况，若此时IF级处于微指令状态，state=1，并且下一条微指令不是终结符，那么wpc=0，则pc在时钟到来时不会更新为中断向量所指的地址。这会造成错误。 再考虑IF级的输出。IF级输出也由pc,upc以及state决定，如果只对pc进行修改，使得pc在中断来临时强制修改，仍然不能使得中断向量正确向ID级传送。 所以作者在状态寄存器向IF控制器的输入处增加了一个多路器，在中断到来时强制设置state=0，但又不修改state寄存器的内容，让原有的state寄存器内容可以向下传递，使中断控制电路可以正确的保存中断前的状态，与此同时制造enter或者normal的假象，正确处理中断时的跳转问题。 小结这篇文章描述了该自制计算机系统中处理器使如何处理微指令的。本文所描述的方法，可以充分利用硬线逻辑控制器的速度优势，又可以提供一个完整的微指令环境对指令集进行扩充。该方法区别于在很多书中记载的微指令实现方法，不使用微指令解码来控制各个功能部件实现不同的功能，而是直接以硬件实现的指令作为微指令。一条由微指令实现的指令，像一个汇编语言中的宏，如果没有这个微指令模块，这些功能自然可以通过汇编语言的宏来实现。但是，微指令模块的意义仍然存在，经过精心调试的微指令，可以充分利用延时槽、流水线冲突避免等特性来获得比用户自定义的宏更好的性能，也可以减少系统编程时出错的概率，还可以减少可执行代码的体积。在某些必须使用多周期才能实现的硬件指令，把他转换成这样的微指令，只需要付出极少的硬件代价，并且其执行可以高效的利用流水线。 该系统实现的难点有二： IF级的指令选择设计 IF级的指令选择与中断系统的结合和兼容设计 关于该系统的进一步验证，等到具体实现，会用EDA工具仿真实验，届时笔者会把硬件逻辑描述和测试用例同步更新在文章中。","link":"/%E5%9C%A8MIPS-CPU%E4%B8%AD%E5%BC%95%E5%85%A5%E5%BE%AE%E4%BB%A3%E7%A0%81/"},{"title":"总线控制器设计","text":"总线设计总线形式CPU内cache通过总线与其他设备包括RAM、ROM及IO设备（Memory Mapped IO）相连。总线可以有多个主设备，能发起读写请求，这使得该系统拥有DMA能力，其他设备能在总线空闲时抢占直接访问存储设备。这一点是受到ZipCPU启发的，ZipCPU使用一种成熟的总线，在本项目中我计划设计一种简单的总线。总线设计如下： ========address ========data --------request --------ready --------r_w --------clk总线控制器总线控制器设计如下： ------------ request&lt;--| state |--&lt;DMA 0 | |--&gt;Grant 0 | BUS |--&lt;DMA 1 | Controller|--&gt;Grant 1 | | ... | |--&lt;DMA 7 clk&gt;--| |--&gt;Grant 7 ------------控制器负责对总线上所有的主设备请求进行排队，其内部指定的优先级由DMA 0 -&gt; DMA 7递减。被允许的设备，会通过Grant X信号通知主设备，由该信号控制设备连接在总线上的三态门，允许其与总线通讯。当任意设备发起DMA请求时，request输出高电平（该信号与总线上的request连接），通知从设备进行通讯。控制器内部有一个状态机，当有请求发出时的下一个时钟上跳进入busy状态，收到任何一个从设备发送来的ready后的下一个时钟上跳进入idle状态。在busy状态其输出不变，等待该设备通讯结束，总线才空闲。该控制器由bus_control.v实现。总线上的请求发送和数据接收都在一个时钟内完成。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162module bus_control( dma,grant,req,ready,clk); input [7:0] dma; input ready, clk; output [7:0] grant; output req;//-------------------------- Module implementation ------------------------- //registered grant value. reg [7:0] grant_reg; //internal state machine reg state; always @(posedge clk) begin case (state) //Idle state, in this state, if has a req, jump to state busy //and register the grant value, this device is chosen, and //other devices&apos; request can&apos;t change the output. 0: begin if (req) state &lt;= 1; grant_reg &lt;= grant_inner; end //Busy state, in this state, if has a ready, jump to state idle 1: begin if (ready) state &lt;= 0; end endcase end //dma request queue. reg [7:0] grant_inner; always @(*) begin casez (dma) 8&apos;bzzzzzzz1 : grant_inner = 8&apos;b00000001; 8&apos;bzzzzzz10 : grant_inner = 8&apos;b00000010; 8&apos;bzzzzz100 : grant_inner = 8&apos;b00000100; 8&apos;bzzzz1000 : grant_inner = 8&apos;b00001000; 8&apos;bzzz10000 : grant_inner = 8&apos;b00010000; 8&apos;bzz100000 : grant_inner = 8&apos;b00100000; 8&apos;bz1000000 : grant_inner = 8&apos;b01000000; 8&apos;b10000000 : grant_inner = 8&apos;b10000000; default : grant_inner = 8&apos;b00000000; endcase end //When state == 0 (idle), grant is the instant output of code above //When state == 1 (busy), grant is the registered value. //This lets the grant output stable when one device has already been //chosen. assign grant = state ? grant_reg : grant_inner; //The req signal will remain untill ready signal is received. assign req = (|grant) ? 1 : 0;endmodule //bus_control 总线控制器仿真如图: 总线上的设备总线上的主设备，连接总线上address、data、r_w和ready，连接控制器的DMA X和Grant X。发起请求时，将DMA x置高电平，排队成功后，由Grant X信号控制address、data、r_w和ready上的三态门。只有当设备被控制器选中，address、data、r_w才能在总线上输出或者输入，否则这些信号是高阻状态。主设备对其是否被选中是不可知的，当某个主设备发起了请求，他便将其请求的地址、数据、读写情况放在输出端口，而输出端口的三态门是由总线控制器传回的Grant X信号控制的。若其未被控制器选中，该设备无法收到其他设备发送的ready信号，因此处于等待状态。因此在总线空闲的时候，如CPU连续cache命中，其他设备即可使用总线进行DMA请求。 总线上的从设备，其接口应对地址线进行范围判定，地址线选定该设备内地址即认为对该设备发起请求。在被请求的数据准备好后，应将数据输出到总线，并将ready置高电平。 CPU内部的cache控制器是主设备，只能发起请求而不能被请求。大部分的IO设备都可以作为主/从设备,既可以发起请求，也可以作为请求的对象。这样的设备要设计分开的端口，负责接受请求的从设备使用从设备接口，负责发起请求的主设备使用主设备接口。 测试如何设计并单独测试总线这一部分呢？需要设计主从设备接口，主从设备模拟器，并将模拟设备接入总线和控制器进行方针和测试。 从设备模拟首先设计了一个模块dummy_slave来模拟从设备在总线上的行为。这个从设备可以看作一个内存设备，需要几个周期将数据准备好，可以读可以写。这个从设备也可以用作处理器的测试。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118//module for dummy slave devices.module dummy_slave( clk,address, data, request, ready, r_w); input clk, r_w, request; input [31:0] address; inout [31:0] data; output reg ready;//-------------------------- Module implementation ------------------------- //dummy memory reg [31:0] mem [0:32-1]; //internal state machine reg [ 2:0] state; //address range reg [31:0] entry_start, entry_end; //internal registers for bus signal reg [31:0] addr_reg,data_reg; reg r_w_reg,selected_reg; initial begin entry_start=32&apos;b0; entry_end =32&apos;b11111; state = 0; //ready signal is Z when idle, ready line should have a tri0 //pulldown resistance. because there&apos;re other devices on the //bus. ready = 1&apos;bz; addr_reg =0; data_reg=0; r_w_reg=0; selected_reg=0; end //selected if request in address range reg selected; always @(*) begin if ((address &gt;= entry_start) &amp;(address &lt;=entry_end) &amp;request ) selected = 1; else selected =0; end //implement inout data port. //if device is selected and the request is a read request, this device //will put data onto the bus. In any other condition, the output will be //high Z. assign data = (selected_reg &amp; ~r_w_reg &amp; ready) ? read :32&apos;bz; //read is the continuous read data out. wire [31:0] read; assign read = mem[addr_reg]; //the state machine implements the dummy wait cycles and ready signal. //one dummy operation needs four cycles. always @(posedge clk) begin //If device is in idle state and selected, register address, r_w //and data. if ((state == 2&apos;b00)&amp; selected) begin state &lt;= 2&apos;b01; //pull the ready line low. ready &lt;= 0; //registered the request addr_reg&lt;= address; r_w_reg &lt;= r_w; selected_reg&lt;=selected; if (r_w) begin data_reg&lt;= data; end end //dummy write and read. else if (state == 2&apos;b01 ) begin state &lt;= 2&apos;b10; if (r_w_reg) mem[addr_reg] &lt;= data_reg; end //dummy wait. else if (state == 2&apos;b10) begin state &lt;= 2&apos;b11; end //operation ready else if (state == 2&apos;b11) begin state &lt;= 3&apos;b100; //one cycle ready signal ready &lt;= 1; end //goto idle next cycle, ready for next request else if (state ==3&apos;b100) begin state &lt;= 00; ready &lt;= 1&apos;bz; selected_reg&lt;= 0; r_w_reg &lt;=0; data_reg &lt;=0; addr_reg&lt;=0; end else begin //if device is idle, and there&apos;s no request on this device //clear all internal registers. state &lt;= 00; ready &lt;= 1&apos;bz; selected_reg&lt;= 0; r_w_reg &lt;=0; data_reg &lt;=0; addr_reg&lt;=0; end endendmodule //dummy_slave 这段代码，在quartus中综合生成了一个隐含的调用FPGA片上存储的模块，模块的类型是dual port/single clock RAM.其实我所设计的模型应当是一个单端口RAM，我查看了Altera的手册，也参考了quartus的代码片段,但是综合后的结果仍然是双端口RAM，这个问题让我想不明白。但是综合的结果满足我的设计需求。细想单端口和双端口RAM的区别，这里综合生成的双端口，应是读写端口共用地址线和数据线，但读端口的数据线用三态门控制，仅在写信号无效时才向总线输出。因为我并不清楚Quartus综合的细节，所以在这里我并不纠结为什么编译器没有按照我的要求综合成单端口RAM了，如果有哪位大佬知道原因，欢迎留言。 1234567891011121314151617181920212223242526272829//Quaratus内置的单端口ram代码片段。module single_port_RAM#(parameter DATA_WIDTH=8, parameter ADDR_WIDTH=6)( input [(DATA_WIDTH-1):0] data, input [(ADDR_WIDTH-1):0] addr, input we, clk, output [(DATA_WIDTH-1):0] q); // Declare the RAM variable reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0]; // Variable to hold the registered read address reg [ADDR_WIDTH-1:0] addr_reg; always @ (posedge clk) begin // Write if (we) ram[addr] &lt;= data; addr_reg &lt;= addr; end // Continuous assignment implies read returns NEW data. // This is the natural behavior of the TriMatrix memory // blocks in Single Port mode. assign q = ram[addr_reg]; dummy_slave的仿真结果： 主设备模拟dummy master最终会被Cache、各种DMA设备替代，但是设计一个dummy master仍然有意义，它可以测试总线的功能，尤其是多个主设备同时请求的情况。 dummy master内部是一个请求队列，其将请求送至总线控制器，在控制器允许后将请求送至总线，等待被请求设备的ready信号，取走数据后重新排队，准备下一个请求。","link":"/%E6%80%BB%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AE%BE%E8%AE%A1/"},{"title":"读完LCC完整源代码","text":"经过了几个月，终于完整的读完了lcc 3.6 的代码，这一阶段工作基本告一段落。对于我来说，lcc是一个十分复杂的软件，虽然我能感受到作者在解释其实现所用的极大努力，但理解起来仍然十分困难。但是当我完整的看完lcc的代码包括其后端后，得到的收获确实很大。通过阅读，基本可以确定对，于我来说，lcc的移植工作技术上是可行的。 LCC的结构先谈一下lcc的结构。原书中的叙述方法，更多的是从功能模块的角度进行叙述的，详细的描述了每一个模块的实现，但是从纵深的角度来看，缺乏对模块之间相互调用相互配合的描述，因此需要阅读时特别留意整个编译程序运行过程中函数之间的调用，才能把握这个复杂的编译程序的整体脉络。 如果从传统的前端-后端角度去看这个编译器，很难去理解。我认为前端-后端这样的分法，实际上是从功能的逻辑层面去考虑的。虽然整个lcc确实在实现上区分了前端和后端，但是在运行过程中，前端和后端的代码始终在相互配合，难以在运行过程明确分离。在我尚未意识到这一点时，阅读代码基本是在关注某个模块的实现，比如语法分析。而这些模块如语法语法分析，实际上是运行过程中比较深得一层，但从这个角度，很难看到阅读编译器的代码如何带给人与仅上编译原理课程不同的好处，填补理论和实践之间的鸿沟。因为这些一个一个的模块，尤其是语法分析，实际上与编译原理的课程内容很相似，事实上，编译原理课程与语法分析这部分的实现重叠很大。 从语法分析到语义分析，这部分内容就开始显现与计算机课程之间的区别了，编译器实现了ANSI C完整的语义，阅读这部分，更像是阅读C语言标准，这里面可以提炼出一些话题进行深入讨论，如C语言中的空指针定义，强制类型转换，函数调用，可变参数函数，参数的估值顺序，结构体中数据的对齐，C语言中复杂的声明等等。从编译器角度看这些问题，的确给人耳目一新的感觉，但是仅仅读到这里，仍然会有许多疑惑尚未被解释。例如函数调用、参数传递，这些都需要和计算平台配合，这些功能的具体实现，还要继续深入了解。我读到这里的时候，最大的疑惑就是程序中的数据是如何和各个标识符相关联的，内存的地址是如何和变量名相关联的。 继续深入下去，lcc的结构就渐渐浮出水面。按照c语言的文法，一个translation unit是c语言程序的基本处理单元，translation unit 包括声明，可以是变量或者是函数的声明，一个c语言文件可以包括若干translation unit。变量的声明，只是处理了标识符、类型、值在编译器内的内部表示。对于变量的初始化，全局变量不产生代码，而是直接将符号和值相互对应起来。只有进行函数定义的时候，才会生成代码。所以分析lcc的整体脉络，需要知道书中讨论的各种功能模块，实际上是以函数定义为单元，往复进行调用。所以分析应从函数定义开始，逐步深入。便可理解一个简单的c语言程序是如何被lcc处理的。 处理函数定义的函数funcdefn第一部分处理要定义的函数的类型，参数列表，处理局部变量和参数（主要是通过后端指定名字，将名字指定为相对于栈的offset），然后对函数定义的compound statement进行语法语义分析，一边分析，一边生成中间语言（森林形式的中间语言），生成中间语言的过程加以优化（如消除公共子式，常量折叠）。然后调用后端function函数，对中间语言进行处理。 function函数，首先根据funcdefn传递过来的参数和局部变量offset计算栈偏移，如果需要，则为生成复制参数的代码（如原来参数由寄存器传入，需要用另一个寄存器或放入栈中），为生成保存函数调用约定中要保存的寄存器的代码做准备，然后调用gencode，对中间语言进行处理。 gencode首先生成对参数进行复制的中间语言，然后根据中间代码森林中树的类型，调用相应的后端函数。Blockbeg对于compound statement中的局部变量以for循环的形式逐个调用local，分配寄存器变量或在栈中划分空间；Local，address节点专门处理临时生成的local变量。gen节点是重中之重，负责生成主要的代码。 gencode—&gt;gen,处理树状的中间语言。这部分书中表13.1描述的较为清晰，prelabel处理已经确定了寄存器的节点的target，_label在树上用树文法与后端模板进行匹配，reduce选择最好的指令输出。prune删去一些不生成指令的子节点，linerize对指令进行排序，最后ralloc对需要寄存器的节点分配寄存器。 然后function 函数开始真正生成代码，首先先输出函数名作为label，作为函数的入口，然后计算framesize和sp，并将sp移动的指令输出（划分栈空间），然后输出保存寄存器的代码，接下来是移动参数的代码。这些工作做完，function调用emitcode函数，生成函数中的语句生成的代码（从已经被标记修减的中间语言树中，按模板生成汇编指令）。最后生成函数的出口，包括恢复保存的寄存器，栈弹出，跳转返回指令。 变量的标识符和值我在阅读代码的时候，十分关注标识符和值是如何关联的。实际上lcc将于C语言的变量名，处理为在数据段中的一个标签。对于未初始化的全局变量，lcc将变量名标签放入bss段；对于初始化的全局变量，lcc根据情况将【变量名标签：值】对放入LIT（read only）或data段，实际的地址生成是汇编器的工作。对于局部变量，则全部表示为栈偏移的形式。这样做的原因是显而易见的：程序运行时的函数调用是动态的，很难确定局部变量的绝对地址，所以使用相对于栈的偏移来解决问题。不同于全局变量，局部变量的初始化是用生成的代码实现的。 对于一些特殊的变量，如数组、字符串的初始化，首先将常量的内容放入LIT段，然后生成一个临时变量保存这个常量内容的标签。 lcc中mips后端的帧结构高地址 -------------------------------- | 调用者的帧 | -------------------------------- |调用者传递的参数 | -------------------------------- —— |局部变量 | | -------------------------------- |被调用者保存的现场 | Framesize ------------------------------- |被调用者调用其他函数时传递的参数| | ------------------------------- ——-----&gt;sp |另一个帧 | 低地址 这里值得一提的是，参数的偏移是相对于sp+framesize的正偏移，因此是从调用者的帧中获取参数的值（参数传递），而局部变量的偏移是相对于sp+framesize的负偏移。 另一处值得说明的是，被调用者如果调用了其他的函数，那么就需要在当前栈中开辟存放outgoing argument的空间，一个函数可以调用很多个其他的函数，这个空间如何确定？在生成函数的代码的过程中，对所有的子函数调用的参数进行统计，得到最大的outgoing argument数量，这里这个空间是这样确定的。 小结了解了lcc的结构，理解了一个简单的c语言程序是如何由lcc一步一步生成汇编语言的，就可以进行移植工作了。 移植工作主要包括：修改指令模板，修改寄存器分配规则，修改函数调用规则，修改各个基本类型的长度和对齐，修改各种名称约定（如各数据段的名字）等。 对于我即将进行的工作，主要的修改应该包括修改类型的长度和对齐（由于cpu取数操作与mips不同），对于乘法除法指令模板应该为函数调用（cpu无乘法器、除法器，这里还需修改clobber函数），对于浮点操作，需要先用编译器编译生成计算函数，然后将指令模板修改为函数调用。修改个数据段名字与汇编器配合。","link":"/%E8%AF%BB%E5%AE%8CLCC%E5%AE%8C%E6%95%B4%E6%BA%90%E4%BB%A3%E7%A0%81/"},{"title":"这只是一个自制计算机系统的项目","text":"该项目是一个自制计算机系统的项目，其目标包括cpu设计、外围的控制器如内存、cache、IO、中断等设计、外设如打印机、存储器等的设计，编译器和操作系统的移植。项目本身并不追求极限性能，和完美的安全性，只是在力所能及的条件下做一些优化。功能完善、易于测试和扩展是本项目的首要目标。 硬件设计目标本项目所使用的CPU为类MIPS架构，硬线逻辑仅支持整数指令，没有硬件乘法器、除法器。在FPGA中综合，不使用任何基于厂商的IP。采用5级流水线，精确中断，集成SDRAM双端口控制器，包含一级指令和数据cache。 CPU的整体结构与李亚民所著的《计算机原理与设计》中的相似，但调整了一些指令的实现，并期望引入微代码来增加CPU的可扩展性，降低编译器移植和系统编程的难度。 编译器移植目标本项目计划移植lcc编译器到该平台，以实现工具链软件。由于本项目所使用的CPU与MIPS结构相似，所以移植基于lcc编译器的MIPS后端md文件进行。由于本项目所使用的CPU与MIPS结构不完全相同，修改lcc的后端的工作可能包括： 熟悉lcc的整体结构,包括其前端和中间代码生成 基于MIPS后端针对该平台进行移植 进行一些力所能及的优化和测试工作 编译器是一个十分复杂的程序，编译器移植工作可能是整个项目中难度最大的部分。 其他工具链软件的设计 对于连接器，本项目认为其在项目初期是可选的 对于汇编器，本项目拟选择一个维护良好的开源汇编器为基础，进行修改 对于预处理器，本项目拟直接使用gcc工具链的C语言预处理器 操作系统的移植目标鉴于MINIX操作系统有详细的资料，并且代码量很少只有几万行，本项目打算在工具链软件调试适当时，进行操作系统的移植工作，目标是将MINIX操作系统移植到该自制平台。这些工作可能包含： Minix 源码的阅读 X86 保护模式的考察 对于该自制平台的保护模式的设计取舍的思考 在不影响兼容性的情况下加入虚拟内存（段式或页式） Minix 的移植工作 从目前来看，minix中平台相关的代码，大量是处理保护模式、中断向量等内容，在硬件相关的设计上可以进行取舍，以简化移植工作。 对于该自制平台的保护模式的设计目标，主要是为了保护操作系统内核的安全，保障操作系统的稳定运行。并不追求完美的进程间的数据隔离。因为Intel的处理器，花费了巨大的精力，实现了其精妙的保护模式，仍然逃不过幽灵、熔毁等旁路攻击。所以在一个科研性质的自制平台上追求完美的数据隔离是不自量力的行为。 Minix3 并不支持分页，使用的是段式存储，这需要对cpu的内存控制进行一些修改。 希望向CPU中加入微代码，也有方便系统编程的目的。可将常用的系统编程指令序列设计成若干由微指令解释的指令，如内存块的复制，中断、异常发生时现场的保存、从中断、异常返回时的现场恢复等。 因为系统编程这一部分，大部分是用汇编语言直接编写，所以编译器并不能帮上忙，若直接定义新指令，可以简化这部分编程的难度，也利于调试。而且这些系统编程指令，往往不是用户程序所使用的，因此编译器可能永远都不知道这些指令的存在，所以引入这些指令可能不需要对编译器的修改。 参考资料该项目是一个长期项目，笔者已经为实施该项目所需要的知识储备准备了多年，并搜集了一些参考资料。 硬件系统的设计 Verilog HDL 数字设计与综合， Samir Lalnitkar, 夏文宇等译。 See MIPS Run, Dominic Sweetman. 这本书很好看，解释了许多重要的概念，例如MIPS中的指令延时槽，内存的保护等。关于这本书还有一些小故事，之前我一直在读这本书，直到最近我才发现这本书有一本中文译本，而且翻译质量非常好，打开一看竟然是我自己的老师屈建勤翻译的，相见恨晚呀！感谢屈老师能为大家提供这么好的学习资料的翻译。 Computer System Architecture, M.Morris Mano. 这本书是很老的书，但是笔者是从这本书里入门的。这本书是笔者刚开始学习计算机系统设计时，经过了很多次试错，最终选定的一本书，写的非常详细。书中从最基本的数字逻辑开始，一直讲到外围电路的设计，没有使用任何基于商业软件的IP，而且最终书里实现了一个很简单的CPU。 计算机原理与设计,李亚民。本项目设计的CPU基于这本书所记载的类MIPS CPU进行修改。笔者非常感谢这本书的作者，这是一本伟大的著作。这本书是我看到过的对处理器设计描述最详尽的著作。在工程上，理论和实践的差距之巨大，无法用语言描述。阅读这本书，从作者精妙的代码中，就可以填补理论和实践之间巨大的鸿沟，这对一个工程师来说会产生一种巨大的满足感。 Fpga4Fun: https://www.fpga4fun.com/. 笔者通过这个网站入门FPGA。 Computer Organization And Design The Hardware/Software Interface. 这是一本经典教材。 软件系统的设计 Operating System Design and Implementation (the Minix Book), Andrew S. Tanenbaum. 这本书简直是学习操作系统的圣经，就是如果认真读代码的话，需要大量的精力。 Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3A: System Programming Guide, Part 1. Minix书中的代码是基于X86的，要想读明白其平台相关的部分，X86的系统编程手册是不可缺少的材料。关于X86的保护模式，手册里有介绍，但是他的介绍非常繁琐，笔者也是花了很长时间才弄明白，有机会笔者会写一篇博文，详细介绍minix如何使用X86的保护模式。 MOP: Minix Overdocumentation Project,http://www.os-forum.com/minix/boot/index.php. 这个网站的作者，花费了大量的时间，对minix的启动代码进行了逐行分析。只要完整的阅读完这个网站，你就可以知道一台X86 PC在按下电源按钮后，BIOS运行结束后到操作系统加载之间的所有运行情况。但是要做好心理准备，这个过程很复杂，并且理解他需要了解X86的保护模式。Minix书中并没有对其boot monitor的代码进行注释，只是在书中提了一句，说boot monitor十分复杂，不亚于一个小型的操作系统。事实上也确实如此，笔者不才，完整阅读这个网站花费了两个多月的时间。笔者发现这个网站，是在读minix书的过程中，由于书中对其启动器描述的缺乏，使得我对操作系统初始的运行环境有疑惑，进而找到了这个网站，完美地解答了疑惑。这个网站的作者，对笔者也有很深的影响，有时候做一件事不需要考虑太多结果。学习本身就是一件有意义的事情，对于个人如此，对于社会更是如此。这个网站也是我准备这个博客的原因之一，要把自己的学习过程社会化，只要能有一个人从我的经历中得到帮助，本身就是一件很有意义的事情。 Lcc-A Retargetable C Compiler: Design and Implementation. lcc是一个很有名的编译器，它本身是一个文本程序，这本书详细的介绍了其实现的每一个细节。只是笔者水平有限，读起来十分吃力，花了将近四个月时间才读完，掌握了对其修改的能力，也深入了解了ANSI C标准的实现。值得一提的是，这本书有一中文译本，但是很遗憾，不同章节翻译的质量有很大的波动，而且也有一些翻译上的错误，在这里笔者就不推荐了。","link":"/%E8%BF%99%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E8%87%AA%E5%88%B6%E7%B3%BB%E7%AE%97%E8%AE%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"development log","slug":"development-log","link":"/tags/development-log/"},{"name":"computer architecture","slug":"computer-architecture","link":"/tags/computer-architecture/"},{"name":"home brew computer system","slug":"home-brew-computer-system","link":"/tags/home-brew-computer-system/"},{"name":"cpu design","slug":"cpu-design","link":"/tags/cpu-design/"},{"name":"micro program","slug":"micro-program","link":"/tags/micro-program/"},{"name":"compiler","slug":"compiler","link":"/tags/compiler/"},{"name":"summarize","slug":"summarize","link":"/tags/summarize/"}],"categories":[{"name":"home brew computer system","slug":"home-brew-computer-system","link":"/categories/home-brew-computer-system/"}]}